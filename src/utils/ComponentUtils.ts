import BaseTheme from '../themes/BaseTheme';
import { pick } from 'lodash';
import * as React from 'react';

const allEvents: string[] = [
    'onAbort',
    'onAnimationStart',
    'onAnimationEnd',
    'onAnimationIteration',
    'onBlur',
    'onCanPlay',
    'onCanPlayThrough',
    'onChange', 
    'onClick',
    'onCompositionEnd',
    'onCompositionStart',
    'onCompositionUpdate',
    'onContextMenu',
    'onCopy',
    'onCut',
    'onDoubleClick',
    'onDrag',
    'onDragEnd',
    'onDragEnter',
    'onDragLeave',
    'onDragOver',
    'onDragStart',
    'onDrop',
    'onDurationChange',
    'onEmptied',
    'onEncrypted',
    'onEnded',
    'onError',
    'onFocus',
    'onGotPointerCapture',
    'onHover',
    'onInput',
    'onInvalid',
    'onLoad',
    'onLoadedData',
    'onLoadedMetadata',
    'onLoadStart',
    'onLostPointerCapture',
    'onKeyDown',
    'onKeyPress',
    'onKeyUp',
    'onMouseDown',
    'onMouseEnter',
    'onMouseLeave',
    'onMouseMove',
    'onMouseOut',
    'onMouseOver',
    'onMouseUp',
    'onPlay',
    'onPlaying',
    'onProgress',
    'onPaste',
    'onPause',
    'onPointerDown',
    'onPointerMove',
    'onPointerUp',
    'onPointerCancel',
    'onPointerEnter',
    'onPointerLeave',
    'onPointerOver',
    'onPointerOut',
    'onRateChange',
    'onReset',
    'onScroll',
    'onSeeked',
    'onSeeking',
    'onSelect',
    'onStalled',
    'onSubmit',
    'onSuspend',
    'onTimeUpdate',
    'onToggle',
    'onTouchCancel',
    'onTouchEnd',
    'onTouchMove',
    'onTouchStart',
    'onTransitionEnd',
    'onVolumeChange',
    'onWaiting',
    'onWheel',
];

export const getClassName = (baseClass: string, className?: string, isDarkMode?: boolean) => {
    const darkModeClass = isDarkMode ? ' is-dark-mode' : '';
    const overrideClass = className ? ` ${className}` : '';
    return `${baseClass}${darkModeClass}${overrideClass}`;
};

export const getBaseStyle = (overrides?: React.CSSProperties): React.CSSProperties =>
    Object.assign({}, BaseTheme, overrides);

export const extractEvents = (props: object) => pick(props, allEvents);
